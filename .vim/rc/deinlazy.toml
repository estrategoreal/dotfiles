[[plugins]]
repo = 'davidhalter/jedi-vim'
if = "!has('nvim')"
on_ft = 'python'
hook_source = '''
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0
  let g:jedi#smart_auto_mappings = 0
  let g:jedi#show_call_signatures = 0
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap w <Plug>(easymotion-lineforward)
  nnoremap W w
  nmap b <Plug>(easymotion-linebackward)
  nnoremap B b
  nmap [Alt]j <Plug>(easymotion-j)
  nmap [Alt]k <Plug>(easymotion-k)

  let g:EasyMotion_startofline = 0
  let g:EasyMotion_show_prompt = 0
  let g:EasyMotion_verbose = 0
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'fuenor/im_control.vim'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = 'denite.nvim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
  let g:easy_align_delimiters = {
        \ '>': { 'pattern': '>>\|=>\|>' },
        \ '/': {
        \     'pattern':         '//\+\|/\*\|\*/',
        \     'delimiter_align': 'l',
        \     'ignore_groups':   ['!Comment'] },
        \ ']': {
        \     'pattern':       '[[\]]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ ')': {
        \     'pattern':       '[()]',
        \     'left_margin':   0,
        \     'right_margin':  0,
        \     'stick_to_left': 0
        \   },
        \ 'd': {
        \     'pattern':      ' \(\S\+\s*[;=]\)\@=',
        \     'left_margin':  0,
        \     'right_margin': 0
        \   }
        \ }

  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
  xmap <Enter> <Plug>(EasyAlign)

  " Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
  nmap <Leader>a <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap I <Plug>(niceblock-I)
  xmap A <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'kana/vim-smartchr'
# on_event = 'InsertCharPre'
on_event = 'InsertEnter'
hook_source = '''
  inoremap <expr> , smartchr#one_of(', ', ',')

  " Smart =.
  inoremap <expr> =
        \ search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
        \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
        \ : smartchr#one_of(' = ', ' == ', '=')
  augroup MyAutoCmd
    " Substitute .. into -> .
    autocmd FileType c,cpp inoremap <buffer> <expr> . smartchr#loop('.', '->', '...')
    autocmd FileType vim inoremap <buffer> <expr> . smartchr#loop('.', ' . ', '..', '...')
  augroup END
'''

[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

[[plugins]]
repo = 'kmnk/denite-dirmark'
on_source = 'denite.nvim'

[[plugins]]
repo = 'LeafCage/foldCC'
on_ft = 'vim'

[[plugins]]
repo = 'lambdalisue/vim-findent'

[[plugins]]
repo = 'mrtazz/DoxygenToolkit.vim'
on_cmd = 'Dox'
hook_add = '''
  nnoremap <silent> [Space]x :<C-u>Dox<CR>
  let g:load_doxygen_syntax = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap J <Plug>(jplus)
'''

[[plugins]]
repo = 'osyo-manga/vim-monster'
on_ft = 'ruby'

[[plugins]]
repo = 'ozelentok/denite-gtags'
on_source = 'denite.nvim'

[[plugins]]
repo = 'preservim/tagbar'
on_cmd = 'TagbarOpen'
hook_add = '''
  if IsWindows()
    let g:tagbar_ctags_bin = 'C:/msys64/usr/local/bin/ctags'
  elseif IsMac()
    let g:tagbar_ctags_bin = '/opt/homebrew/bin/ctags'
  elseif IsMsys()
    let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
  elseif IsFreeBSD()
    let g:tagbar_ctags_bin = '/usr/local/bin/exctags'
  else
    let g:tagbar_ctags_bin = '/usr/bin/ctags'
  endif
  if has('gui_running')
    let g:tabgar_autofocus = 1
    let g:tagbar_width = 42
  endif
  let g:tagbar_sort = 0
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_source = '''
  let $RUST_SRC_PATH = expand('~/.multirust/toolchains/'
  \ .'stable-x86_64-unknown-linux-gnu/'
  \ .'lib/rustlib/src/rust/src/')
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)a
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_event = 'BufRead'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = 'denops.vim'
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
  " Customize global settings

  set completeopt+=noinsert

  " You must set the default ui.
  " Note: native ui
  " https://github.com/Shougo/ddc-ui-native
  call ddc#custom#patch_global('ui', 'native')

  " Use around source.
  " https://github.com/Shougo/ddc-source-around
  call ddc#custom#patch_global('sources', ['around'])

  " Use matcher_head and sorter_rank.
  " https://github.com/Shougo/ddc-matcher_head
  " https://github.com/Shougo/ddc-sorter_rank
  call ddc#custom#patch_global('sources', ['neosnippet'])
  call ddc#custom#patch_global('sourceOptions', #{
        \  _: #{
        \   matchers: ['matcher_head'],
        \   sorters: ['sorter_rank'],
        \ },
        \   neosnippet: {'mark': 'ns', 'dup': v:true},
        \ })

  " Change source options
  call ddc#custom#patch_global('sourceOptions', #{
        \   around: #{ mark: 'A' },
        \ })
  call ddc#custom#patch_global('sourceParams', #{
        \   around: #{ maxSize: 500 },
        \ })

  " Customize settings on a filetype
  " call ddc#custom#patch_filetype(['c', 'cpp'], 'sources',
  "      \ ['around', 'clangd']
  "      \ )
  call ddc#custom#patch_filetype(['c', 'cpp'], 'sources',
       \ ['around', 'neosnippet']
       \ )
  call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', #{
        \   clangd: #{ mark: 'C'},
        \ })
  call ddc#custom#patch_filetype('markdown', 'sourceParams', #{
        \   around: #{ maxSize: 100 },
        \ })

  " Mappings

  " <TAB>: completion.
  " Note: It does not work for pum.vim
  inoremap <silent><expr> <TAB>
  \ pumvisible() ? '<C-n>' :
  \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
  \ '<TAB>' : ddc#map#manual_complete()

  " <S-TAB>: completion back.
  " Note: It does not work for pum.vim
  inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

  " Use ddc.
  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-zsh'
on_source = 'ddc.vim'
depends = 'ddc.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  nnoremap <silent> [Space]f
  \ :<C-u>Defx -listed -resume -buffer-name=win-`win_getid()`<CR>
'''
hook_source = '''
  if !IsWindows()
    call defx#custom#column('mark', {
            \ 'readonly_icon': '✗',
            \ 'selected_icon': '✓',
            \ })
    call defx#custom#column('icon', {
            \ 'directory_icon': '▸',
            \ 'opened_icon': '▾',
            \ 'root_icon': ' ',
            \ })
  endif
'''
[plugins.ftplugin]
defx = '''
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#is_directory() ?
  \ defx#do_action('open_or_close_tree') :
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('preview')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_tree', 'toggle')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = '''
  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  endfunction

  if executable('rg')
    " For ripgrep
    " Note: rg is faster than ag
    call denite#custom#var('file/rec', 'command',
    \ ['rg', '--files', '--glob', '!.git', '--color', 'never'])
    " Ripgrep command on grep source
    call denite#custom#var('grep', {
            \ 'command': ['rg'],
            \ 'default_opts': ['--vimgrep', '--no-heading'],
            \ 'recursive_opts': [],
            \ 'pattern_opt': ['--regexp'],
            \ 'separator': ['--'],
            \ 'final_opts': [],
            \ })
  elseif executable('pt')
    " NOTE: It also supports windows.
    call denite#custom#var('file/rec', 'command',
    \ ['pt', '--follow', '--nocolor', '--nogroup',
    \  (has('win32') ? '-g:' : '-g='), ''])
    " Pt command on grep source
    call denite#custom#var('grep', {
            \ 'command': ['pt'],
            \ 'default_opts': ['--nogroup', '--nocolor', '--smart-case'],
            \ 'recursive_opts': [],
            \ 'pattern_opt': [],
            \ 'separator': ['--'],
            \ 'final_opts': [],
            \ })
  else
    " Change file/rec command.
    call denite#custom#var('file/rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    " Ag command on grep source
    call denite#custom#var('grep', {
            \ 'command': ['ag'],
            \ 'default_opts': ['-i', '--vimgrep'],
            \ 'recursive_opts': [],
            \ 'pattern_opt': [],
            \ 'separator': ['--'],
            \ 'final_opts': [],
            \ })
  endif
  call denite#custom#source('grep', 'max_candidates', 10000)

  call denite#custom#source('file/old', 'matchers', [
        \ 'matcher/clap', 'matcher/project_files', 'matcher/ignore_globs',
        \ ])
  call denite#custom#source('tag', 'matchers', ['matcher/substring'])
  call denite#custom#source('file/old,ghq', 'converters',
        \ ['converter/relative_word', 'converter/relative_abbr'])

  call denite#custom#alias('source', 'file/git', 'file/rec')
  call denite#custom#var('file/git', 'command',
        \ ['git', 'ls-files', '-co', '--exclude-standard'])

  call denite#custom#filter('matcher/clap',
        \ 'clap_path', expand('~/src/vim-clap'))
  call denite#custom#source('file/rec', 'matchers', [
        \ 'matcher/clap',
        \ ])

  call denite#custom#alias('source', 'file/dirty', 'file/rec')
  call denite#custom#var('file/dirty', 'command',
        \ ['git', 'ls-files', '-mo',
        \  '--directory', '--no-empty-directory', '--exclude-standard'])

  " call denite#custom#option('default', 'prompt', '>')
  " call denite#custom#option('default', 'short_source_names', v:true)
  if has('nvim')
    call denite#custom#option('default', {
          \ 'highlight_filter_background': 'CursorLine',
          \ 'source_names': 'short',
          \ 'split': 'floating',
          \ 'filter_split_direction': 'floating',
          \ 'vertical_preview': v:true,
          \ 'floating_preview': v:true,
          \ })
  else
    call denite#custom#option('default', {
          \ 'highlight_filter_background': 'CursorLine',
          \ 'source_names': 'short',
          \ 'vertical_preview': v:true,
          \ })
  endif
  call denite#custom#option('search', {
        \ 'highlight_filter_background': 'CursorLine',
        \ 'source_names': 'short',
        \ 'filter_split_direction': 'floating',
        \ })

  let s:menus = {}
  let s:menus.vim = {
      \ 'description': 'Vim',
      \ }
  let s:menus.vim.file_candidates = [
      \ ['    > Edit configuation file (init.vim)', '~/.config/nvim/init.vim']
      \ ]
  call denite#custom#var('menu', 'menus', s:menus)

  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
        \ [ '.git/', '.ropeproject/', '__pycache__/',
        \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
'''
hook_add = '''
  " The prefix key.
  nnoremap [denite] <Nop>
  xnoremap [denite] <Nop>
  nmap ; [denite]
  xmap ; [denite]

  nnoremap <silent> [denite]c
       \ :<C-u>Denite gtags_context -buffer-name=search -auto-action=preview<CR>
  nnoremap <silent> [denite]d
        \ :<C-u>DeniteBufferDir -buffer-name=files file<CR>
  nnoremap <silent> [denite]f
        \ :<C-u>Denite buffer file_mru dirmark<CR>
  nnoremap <silent> [denite]h
        \ :<C-u>DeniteCursorWord help<CR>
  nnoremap <silent> [denite]j
        \ :<C-u>Denite change jump<CR>
  nnoremap <silent> [denite]o
        \ :<C-u>Denite outline<CR>
  nnoremap <silent> [denite]r
        \ :<C-u>Denite -buffer-name=register -default-action=append register neoyank<CR>
  xnoremap <silent> [denite]r
        \ d:<C-u>Denite -buffer-name=register -default-action=replace register neoyank<CR>
  nnoremap <silent> [denite]s
        \ :<C-u>Denite source<CR>
  nnoremap <silent> [denite]t
        \ :<C-u>DeniteCursorWord -buffer-name=tag tag:include<CR>
  nnoremap <silent><expr> [Window]s finddir('.git', ';') != '' ?
        \ ":\<C-u>Denite -sorters=sorter/rank -unique
        \  file/point file/old file/dirty file/git file file:new\<CR>" :
        \ ":\<C-u>Denite -sorters=sorter/rank -unique
        \  file/point file/old file file:new\<CR>"
  nnoremap <silent> [Window]<Space>
        \ :<C-u>Denite file/rec:~/.vim/rc<CR>
  " nnoremap <silent><expr> / wordcount().chars > 30000 ?
  "      \ ":\<C-u>Denite -buffer-name=search -start-filter
  "      \  -search line/external\<CR>" :
  "      \ ":\<C-u>Denite -buffer-name=search -start-filter -search line\<CR>"
  " nnoremap <silent><expr> * wordcount().chars > 30000 ?
  "      \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line/external\<CR>" :
  "      \ ":\<C-u>DeniteCursorWord -buffer-name=search -search line\<CR>"
  " xnoremap <silent> *
  "      \ "qy:Denite -input=`@q` -buffer-name=search -search line<CR>

  nnoremap <silent> [denite]g
        \ :<C-u>Denite grep -buffer-name=grep`tabpagenr()` -auto-action=preview<CR>
  nnoremap <silent> [denite]G
        \ :<C-u>DeniteCursorWord grep -buffer-name=search -auto-action=preview<CR>
  xnoremap <silent> [denite]G
        \ :<C-u>call <SID>visual_grep()<CR>
  function! s:visual_grep() abort
    let tmp = @@
    silent normal gvy
    let selected = @@
    let @@ = tmp
    execute 'Denite grep:.::' . selected . ' -buffer-name=search -auto-action=preview'
  endfunction
  nnoremap <silent> [Space]b :<C-u>Denite dirmark/add::"`expand('%:p:h')`"<CR>

  " t: tags-and-searches "{{{
  " The prefix key.
  nnoremap [Tag] <Nop>
  nmap t [Tag]
  " Jump.
  nnoremap [Tag]t <C-]> zv zz
  " Jump next.
  nnoremap <silent> [Tag]n :<C-u>tnext<CR>
  " Jump previous.
  nnoremap <silent> [Tag]p :<C-u>pop<CR>
  " nnoremap <silent><expr> [Tag]t &filetype == 'help' ?  "g\<C-]>" :
  "       \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately tag:include\<CR>"
  " nnoremap <silent><expr> [Tag]p &filetype == 'help' ?
  "       \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite jump\<CR>"
  "}}}
'''
[plugins.ftplugin]
denite = '''
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> a
  \ denite#do_map('choose_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> e
  \ denite#do_map('do_action', 'edit')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> N
  \ denite#do_map('do_action', 'new')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> '
  \ denite#do_map('quick_move')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> r
  \ denite#do_map('do_action', 'quickfix')
  nnoremap <silent><buffer><expr> <C-r>
  \ denite#do_map('restore_sources')
  nnoremap <silent><buffer><expr> <C-l>
  \ denite#do_map('redraw')
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
depends = 'denite.nvim'
on_source = ['defx.nvim', 'denite.nvim']
hook_add = '''
  nnoremap <silent> [Space]s :<C-u>Deol zsh -no-start-insert<CR>
  nnoremap <silent> [Window]D :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
  let g:deol#prompt_pattern = '\w*% '
  let g:deol#shell_history_path = '~/.zsh-history'
  let g:deol#extra_options = {
      \ 'term_kill': 'kill',
      \ }
'''
[plugins.ftplugin]
deol = '''
  nnoremap <buffer><silent> [Space]gc
  \ :<C-u>call deol#send('git commit')<CR>
  nnoremap <buffer><silent> [Space]gs
  \ :<C-u>call deol#send('git status')<CR>
  nnoremap <buffer><silent> [Space]gA
  \ :<C-u>call deol#send('git commit --amend')<CR>
  nmap <buffer> i <Plug>(deol_edit)
  nmap <buffer> e <Plug>(deol_edit)
'''
zsh = '''
  inoreabbrev <buffer><expr> g deol#abbrev('g', 'g', 'git')
  inoreabbrev <buffer><expr> a deol#abbrev('git a', 'a', 'add')
  inoreabbrev <buffer><expr> b deol#abbrev('git b', 'b', 'branch')
  inoreabbrev <buffer><expr> c deol#abbrev('git c', 'c', 'commit')
  inoreabbrev <buffer><expr> d deol#abbrev('git d', 'd', 'diff')
  inoreabbrev <buffer><expr> p deol#abbrev('git p', 'p', 'push')
  inoreabbrev <buffer><expr> s deol#abbrev('git s', 's', 'status')
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
if = 'has("nvim")'
on_event = 'InsertEnter'
hook_source = '''
  " Test
  "imap L  <Plug>(deoppet_expand)
  imap <expr> L  deoppet#expandable() ?
  \ "\<Plug>(deoppet_expand)" : ''
  imap <C-f> <Plug>(deoppet_jump_forward)
  imap <C-b> <Plug>(deoppet_jump_backward)
  smap <C-f> <Plug>(deoppet_jump_forward)
  smap <C-b> <Plug>(deoppet_jump_backward)
  xmap <C-l> <Plug>(deoppet_select_text)
  xmap <C-x> <Plug>(deoppet_cut_text)
  call deoppet#initialize()
  call deoppet#custom#option('snippets_dirs',
          \ [expand('~/.vim/snippets')] +
          \ globpath(&runtimepath, 'neosnippets', 1, 1))
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> [Window]e :<C-u>Denite junkfile:new junkfile<CR>
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'
hook_add = '''
  let g:neomru#file_mru_limit = 200
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
# on_event = 'InsertCharPre'
on_event = 'InsertEnter'
on_ft = 'snippet'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  " Enable snipMate compatibility feature.
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1

  " let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate/snippets/'
  let g:neosnippet#snippets_directory = '~/.vim/snippets'

  let g:neosnippet#disable_runtime_snippets = {
        \   'c' : 1, 'ruby' : 1,
        \ }
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = 1
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = 'qf'
hook_add = '''
  autocmd MyAutoCmd FileType qf nnoremap <buffer> r :<C-u>Qfreplace<CR>
'''

[[plugins]]
repo = 'thinca/vim-ref'
on_map = {n = '<Plug>'}
hook_source = '''
  let g:ref_cache_dir = expand('$CACHE/ref')
  if IsWindows()
    let g:ref_refe_encoding = 'cp932'
  endif

  autocmd MyAutoCmd FileType ref call s:ref_my_settings()
  function! s:ref_my_settings() abort "{{{
    " Overwrite settings.
    nmap <buffer> [Tag]t <Plug>(ref-keyword)
    nmap <buffer> [Tag]p <Plug>(ref-back)
    nnoremap <buffer> <TAB> <C-w>w
  endfunction"}}}
'''

[[plugins]]
repo = 'todesking/ruby_hl_lvar.vim'
on_ft = 'ruby'

[[plugins]]
repo = 'tweekmonster/impsort.vim'
on_cmd = 'ImpSort'
hook_source = 'let g:impsort_highlight_imported = 0'

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> gc
      silent! xunmap <buffer> gc
      silent! nunmap <buffer> gcc
      silent! xunmap <buffer> gcc
    else
      nmap <buffer> gc <Plug>(caw:prefix)
      xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
  call InitCaw()
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = 'CursorHold'

[[plugins]]
repo = 'yuratomo/w3m.vim'
on_cmd = 'W3mTab'
hook_add = '''
  nnoremap [Alt]w :<C-u>W3mTab<Space>
  if IsWindows() || IsMsys()
    let g:w3m#external_browser = 'C:/Program\ Files\ (x86)/Google/Chrome/Application/chrome.exe'
  elseif IsMac()
    let g:w3m#external_browser = 'open -a "Google Chrome"'
  elseif IsFreeBSD()
    let g:w3m#external_browser = 'chrome'
  else
    let g:w3m#external_browser = 'chromium'
  endif
  " let g:w3m#search_engine = 'https://www.google.co.jp/search?ie=' . &encoding . '&q=%s'
  let g:w3m#search_engine = 'https://www.google.co.jp/search?q=%s'
  autocmd MyAutoCmd FileType w3m call s:w3m_settings()
  function! s:w3m_settings() abort
    nnoremap <buffer> H :<C-u>call w3m#Back()<CR>
    nnoremap <buffer> L :<C-u>call w3m#Forward()<CR>
    nnoremap <buffer> E :<C-u>W3mShowExtenalBrowser<CR>
    nnoremap <buffer> Q :<C-u>W3mClose<CR>
  endfunction
'''

